@page "/SystemAdmin/SandboxTemplates";
@layout MyLayout;
@inject PermissionProviderService PermissionProvider;
@inject SandboxTemplateHandleService SandboxTemplateHandler;
@inject Data.DatabaseContext DB;
@inject IJSRuntime JS;
@using Microsoft.AspNetCore.Mvc.Localization;
@inject IHtmlLocalizer<Hugin.Lang> Localizer;


@if (!string.IsNullOrWhiteSpace(NormalMessage))
{
    <article class="message is-primary">
        <div class="message-body">@NormalMessage</div>
    </article>
}
@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <article class="message is-danger">
        <div class="message-body">@ErrorMessage</div>
    </article>
}

<AccessRestrictions Checker="p=> p.CanEditSandboxTemplate(LoginUser)">

    <Paginated Collection="sandboxTemplates" @ref="@Pagination">
        <nav class="panel is-info">
            <div class="panel-heading">
                @Localizer["SandboxTemplates"].Value
            </div>
            <div class="panel-block tt">
                <table class="table is-fullwidth" style="font-size: small">
                    <thead>
                        <tr>
                            <th class="is-2">@Localizer["Name"].Value</th>
                            <th class="is-8">@Localizer["Description"].Value</th>
                            <th class="is-2"></th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (Data.SandboxTemplate template in Pagination.ShowedModels.ToList())
                    {
                        <tr>
                            <td><a href="javascript: void(0);" @onclick="() => { showSandboxTemplateDetail(template); }">@template.Name</a></td>
                            <td>@template.Description</td>
                            <td>
                                @if (PermissionProvider.CanEditSandboxTemplate(LoginUser))
                                { 
                                    <a href="javascript: void(0)" @onclick="async () => { await editModalOnAsync(template); }"><i class="fas fa-edit"></i></a>
                                    <a href="javascript: void(0)" @onclick="async () => { await removeAsync(template); }"><i class="fas fa-trash-alt"></i></a>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                    @if (PermissionProvider.CanEditSandboxTemplate(LoginUser))
                    {
                        <tfoot>
                            <tr>
                                <th></th>
                                <th></th>
                                <th>
                                    <a @onclick="async () => { await createModalOnAsync(); }">
                                        <i class="fas fa-plus"></i>
                                    </a>
                                </th>
                            </tr>
                        </tfoot>
                    }
                </table>
            </div>
        </nav>
    </Paginated>
</AccessRestrictions>


@if(sandboxTemplate != null)
{
<div class="box">
    <h4 id="const" class="title is-3 tt">@sandboxTemplate.Name</h4>
    <p class="mb-4">@sandboxTemplate.Description</p>
    <pre><code class="language-shell tt">@sandboxTemplate.Commands</code></pre>
</div>
}

<div class="modal" id="user-modal">
    @if (model != null && editMode != EditMode.None)
    {
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">
                    @if (editMode == EditMode.CreateNew)
                    {
                        <text>@Localizer["CreateNewSandboxTemplate"].Value</text>
                    }
                    @if (editMode == EditMode.Edit)
                    {
                        <text>@Localizer["EditSandboxTemplate"].Value</text>
                    }
                </p>
                <button class="delete" @onclick="async () => await modalOffAsync()" aria-label="close"></button>
            </header>
            <section class="modal-card-body">

                <EditForm EditContext="@editContext" OnSubmit="@submit">
                    <DataAnnotationsValidator />

                    <div class="field">
                        <label class="label tt">@Localizer["Name"].Value</label>
                        <div class="control">
                            @if (editMode == EditMode.CreateNew)
                            {
                                <input class="input tt" type="text" @bind="@model.Name">
                                <p class="help is-danger"><ValidationMessage For="@(() => model.Name)" /></p>
                            }
                            @if (editMode == EditMode.Edit)
                            {
                                <input class="input tt" type="text" value="@model.Name" readonly>
                            }
                        </div>
                    </div>
                    <div class="field">
                        <label class="label tt">@Localizer["Description"].Value</label>
                        <div class="control">
                            <textarea class="textarea tt" @bind="@model.Description"></textarea>
                        </div>
                        <p class="help is-danger"><ValidationMessage For="@(() => model.Description)" /></p>
                    </div>
                    <div class="field">
                        <label class="label tt">@Localizer["Commands"].Value</label>
                        <div class="control">
                            <textarea class="textarea tt" @bind="@model.Commands"></textarea>
                        </div>
                        <p class="help is-danger"><ValidationMessage For="@(() => model.Commands)" /></p>
                    </div>
                </EditForm>

            </section>

            <footer class="modal-card-foot">
                <buttons>
                    <button class="button is-success" @onclick="async () => await submit()">@Localizer["OK"].Value</button>
                    <button class="button" @onclick="async () => await modalOffAsync()">@Localizer["Cancel"].Value</button>
                </buttons>
            </footer>
        </div>
    }
</div>



@code
{
    private IEnumerable<Data.SandboxTemplate> sandboxTemplates;
    private Data.SandboxTemplate sandboxTemplate;

    private enum EditMode
    {
        None, CreateNew, Edit
    }
    private EditMode editMode = EditMode.None;
    private EditContext editContext { get; set; }
    private ValidationMessageStore messageStore;
    private Data.SandboxTemplate model { get; set; }
    private bool processing = false;

    private string ErrorMessage { get; set; }
    private string NormalMessage { get; set; }

    private Paginated<Data.SandboxTemplate> Pagination;



    [CascadingParameter]
    public Data.User LoginUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        updateSandboxTemplates();
    }

    private void showSandboxTemplateDetail(Data.SandboxTemplate sandboxTemplate)
    {
        this.sandboxTemplate = sandboxTemplate;
        StateHasChanged();
    }

    private void updateSandboxTemplates()
    {
        sandboxTemplates = SandboxTemplateHandler.Set.OrderBy(x => x.Name).AsNoTracking();
    }

    private async Task removeAsync(Data.SandboxTemplate template)
    {
        sandboxTemplate = null;
        if (await JS.InvokeAsync<bool>("showConfirmDialog", Localizer["AreYouSureDelete"].Value))
        {
            if (!PermissionProvider.CanEditSandboxTemplate(LoginUser))
            {
                SandboxTemplateHandler.Remove(template);
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task createModalOnAsync()
    {
        sandboxTemplate = null;
        editMode = EditMode.CreateNew;
        model = new Data.SandboxTemplate { };
        resetEdittingModel(model);
        await InvokeAsync(() => StateHasChanged());
        await JS.InvokeVoidAsync("modalOn", "user-modal");
    }

    private async Task editModalOnAsync(Data.SandboxTemplate template)
    {
        sandboxTemplate = null;
        editMode = EditMode.Edit;
        model = template;
        resetEdittingModel(model);
        await InvokeAsync(() => StateHasChanged());
        await JS.InvokeVoidAsync("modalOn", "user-modal");
    }
    private async Task modalOffAsync()
    {
        model = null;
        editMode = EditMode.None;
        await InvokeAsync(() => StateHasChanged());
        await JS.InvokeVoidAsync("modalOff", "user-modal");
    }

    private void resetEdittingModel(Data.SandboxTemplate template)
    {
        editContext = new EditContext(template);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (s, e) => messageStore.Clear();
        editContext.OnFieldChanged += (s, e) => messageStore.Clear(e.FieldIdentifier);
    }
    private void addValidationError(string fieldName, string errorMessage)
    {
        messageStore.Add(editContext.Field(fieldName), errorMessage);
        editContext.NotifyValidationStateChanged();
    }

    private async Task submit()
    {
        if (processing) return;
        processing = true;
        ErrorMessage = "";
        NormalMessage = "";
        await InvokeAsync(() => StateHasChanged());

        bool v1 = true, v2 = true;
        v1 = editContext.Validate();
        if (!PermissionProvider.CanEditSandboxTemplate(LoginUser))
        {
            v2 = false;
            messageStore.Add(editContext.Field("Name"), "You can not edit sandbox template.");
            editContext.NotifyValidationStateChanged();
        }
        if (v1 && v2)
        {
            onValid(editContext);
            await modalOffAsync();
            updateSandboxTemplates();
            await InvokeAsync(() => StateHasChanged());
        }
        processing = false;
    }


    protected virtual void onValid(EditContext editContext)
    {
        try
        {
            if (editMode == EditMode.CreateNew)
            {
                if (SandboxTemplateHandler.AddNew(model) == null)
                {
                    throw new Exception("Error");
                }
            }
            if (editMode == EditMode.Edit)
            {
                if (SandboxTemplateHandler.Update(model) == null)
                {
                    throw new Exception("Error");
                }
            }
            NormalMessage = "Success";
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            NormalMessage = "";
        }
    }

}