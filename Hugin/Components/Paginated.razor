@typeparam T

@ChildContent

@if (HasPagination)
{
    var previous = 0;
    <nav class="pagination is-small @CssClass" role="navigation" aria-label="pagination">
        <a class="pagination-previous" @onclick="async () => { if (PageNumber > 1) { await GotoPageAsync(PageNumber - 1); } }"><i class="fas fa-angle-left"></i></a>
        <a class="pagination-next" @onclick="async () => { if (PageNumber < pages.Max()) { await GotoPageAsync(PageNumber + 1); } }"><i class="fas fa-angle-right"></i></a>
        <ul class="pagination-list">

            @foreach (var i in pages)
            {
                if (previous + 1 != i)
                {
                    <li><span class="pagination-ellipsis">&hellip;</span></li>
                }
                if (i == PageNumber)
                {
                    <li><a class="pagination-link is-current" aria-label="Page @i" aria-current="page">@i</a></li>
                }
                else
                {
                    <li><a class="pagination-link" @onclick="async () => await GotoPageAsync(i)" aria-label="Goto page @i">@i</a></li>
                }
                previous = i;
            }
        </ul>
    </nav>
}


@code{

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public IEnumerable<T> Collection { get; set; }
    [Parameter]
    public IEnumerable<T> ShowedModels { get; set; }
    [Parameter]
    public int PageNumber { get; set; } = 1;
    [Parameter]
    public int EntriesPerPage { get; set; } = 10;
    [Parameter]
    public string CssClass { get; set; }

    protected IEnumerable<int> pages;

    public bool HasPagination { get { return pages.Count() > 1; } }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        await UpdateAsync();
    }

    public async Task UpdateAsync()
    {
        ShowedModels = Collection.Skip(EntriesPerPage * (PageNumber - 1)).Take(EntriesPerPage);
        var cnt = Collection.Count();
        var total = cnt / EntriesPerPage + (cnt % EntriesPerPage > 0 ? 1 : 0);
        var head = Enumerable.Range(1, 3);
        var around = Enumerable.Range(PageNumber - 3, 7);
        var tail = Enumerable.Range(total - 2, 3);
        pages = head.Concat(around).Concat(tail).OrderBy(x => x).Where(x => x > 0 && x <= total).Distinct();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async Task GotoPageAsync(int i)
    {
        PageNumber = i;
        ShowedModels = Collection.Skip(EntriesPerPage * (PageNumber - 1)).Take(EntriesPerPage);
        await UpdateAsync();
    }
}